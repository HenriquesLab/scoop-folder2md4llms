{
    "version": "0.4.28",
    "description": "Enhanced tool to concatenate folder contents into markdown format for LLM consumption",
    "homepage": "https://github.com/henriqueslab/folder2md4llms",
    "license": "MIT",
    "depends": ["python"],
    "suggest": {
        "vcredist": "extras/vcredist2022"
    },
    "installer": {
        "script": [
            "Write-Host 'Installing folder2md4llms...'",
            "try {",
            "    python -m pip install --upgrade --force-reinstall \"folder2md4llms==$version\"",
            "    Write-Host 'Installation completed successfully!'",
            "} catch {",
            "    Write-Host 'Installation failed. Please ensure Python and pip are properly installed.'",
            "    throw",
            "}"
        ]
    },
    "uninstaller": {
        "script": [
            "Write-Host 'Uninstalling folder2md4llms...'",
            "try {",
            "    python -m pip uninstall -y folder2md4llms",
            "    Write-Host 'Uninstallation completed successfully!'",
            "} catch {",
            "    Write-Host 'Uninstallation failed or package was not found.'",
            "}"
        ]
    },
    "bin": [
        [
            "folder2md.cmd",
            "folder2md"
        ]
    ],
    "post_install": [
        "Write-Host '=== SCOOP FOLDER2MD4LLMS DIAGNOSTIC REPORT ===' -ForegroundColor Cyan",
        "",
        "# Step 1: Check what files pip installed",
        "Write-Host '1. Checking pip installation files...' -ForegroundColor Yellow",
        "try {",
        "    $pipFiles = python -m pip show -f folder2md4llms 2>&1",
        "    $executableLines = $pipFiles | Where-Object { $_ -like '*folder2md*' -or $_ -like '*Scripts*' }",
        "    if ($executableLines) {",
        "        Write-Host '   Found folder2md-related files:' -ForegroundColor Green",
        "        $executableLines | ForEach-Object { Write-Host \"     $_\" }",
        "    } else {",
        "        Write-Host '   No folder2md executable files found in pip output' -ForegroundColor Red",
        "    }",
        "} catch {",
        "    Write-Host '   Error running pip show: $($_.Exception.Message)' -ForegroundColor Red",
        "}",
        "",
        "# Step 2: Check Python Scripts directory",
        "Write-Host '2. Checking Python Scripts directory...' -ForegroundColor Yellow",
        "$pythonScripts = \"$env:USERPROFILE\\scoop\\apps\\python\\current\\Scripts\"",
        "Write-Host \"   Scripts directory: $pythonScripts\"",
        "if (Test-Path $pythonScripts) {",
        "    $folder2mdFiles = Get-ChildItem $pythonScripts | Where-Object Name -like '*folder2md*'",
        "    if ($folder2mdFiles) {",
        "        Write-Host '   Found folder2md files:' -ForegroundColor Green",
        "        $folder2mdFiles | ForEach-Object { Write-Host \"     $($_.Name) ($($_.Length) bytes)\" }",
        "    } else {",
        "        Write-Host '   No folder2md files found in Scripts directory' -ForegroundColor Red",
        "        Write-Host '   All Scripts directory contents:'",
        "        Get-ChildItem $pythonScripts | ForEach-Object { Write-Host \"     $($_.Name)\" }",
        "    }",
        "} else {",
        "    Write-Host '   Scripts directory does not exist!' -ForegroundColor Red",
        "}",
        "",
        "# Step 3: Check PATH configuration",
        "Write-Host '3. Checking PATH configuration...' -ForegroundColor Yellow",
        "$pathEntries = $env:Path.split(';')",
        "$pythonInPath = $pathEntries | Where-Object { $_ -like '*python*Scripts*' -or $_ -like '*Python*Scripts*' }",
        "if ($pythonInPath) {",
        "    Write-Host '   Python Scripts in PATH:' -ForegroundColor Green",
        "    $pythonInPath | ForEach-Object { Write-Host \"     $_\" }",
        "} else {",
        "    Write-Host '   Python Scripts directory NOT found in PATH!' -ForegroundColor Red",
        "}",
        "",
        "# Step 4: Test Python module directly",
        "Write-Host '4. Testing Python module access...' -ForegroundColor Yellow",
        "try {",
        "    $moduleTest = python -m folder2md4llms.cli --version 2>&1",
        "    Write-Host '   Module test result:' -ForegroundColor Green",
        "    Write-Host \"     $moduleTest\"",
        "} catch {",
        "    Write-Host '   Module test failed: $($_.Exception.Message)' -ForegroundColor Red",
        "}",
        "",
        "# Step 5: Force Scoop to regenerate shims",
        "Write-Host '5. Regenerating Scoop shims...' -ForegroundColor Yellow",
        "try {",
        "    scoop reset python 2>&1 | Out-Null",
        "    Write-Host '   Scoop shims regenerated successfully' -ForegroundColor Green",
        "} catch {",
        "    Write-Host '   Failed to regenerate shims: $($_.Exception.Message)' -ForegroundColor Red",
        "}",
        "",
        "# Step 6: Check if executable now works",
        "Write-Host '6. Testing folder2md command availability...' -ForegroundColor Yellow",
        "$folder2mdExe = \"$pythonScripts\\folder2md.exe\"",
        "if (Test-Path $folder2mdExe) {",
        "    Write-Host '   Found folder2md.exe - creating proper shim' -ForegroundColor Green",
        "    # Let Scoop handle the shim naturally by ensuring it's in bin",
        "    Write-Host '   Executable location: $folder2mdExe'",
        "} else {",
        "    Write-Host '   folder2md.exe not found - creating batch wrapper' -ForegroundColor Yellow",
        "    $batchFile = \"$dir\\folder2md.cmd\"",
        "    $batchContent = \"@echo off`r`npython -m folder2md4llms.cli %*\"",
        "    $batchContent | Set-Content -Path $batchFile -Encoding ascii",
        "    Write-Host \"   Created batch wrapper at: $batchFile\"",
        "}",
        "",
        "Write-Host '=== END DIAGNOSTIC REPORT ===' -ForegroundColor Cyan",
        "",
        "Write-Host 'folder2md4llms installation complete!' -ForegroundColor Green",
        "Write-Host ''",
        "Write-Host 'Usage:'",
        "Write-Host '  folder2md . --output output.md    # Process current directory'",
        "Write-Host '  folder2md --help                  # Show all options'", 
        "Write-Host '  python -m folder2md4llms.cli      # Alternative if command not found'",
        "Write-Host ''",
        "Write-Host 'Documentation: https://github.com/henriqueslab/folder2md4llms'"
    ],
    "checkver": {
        "url": "https://pypi.org/pypi/folder2md4llms/json",
        "jsonpath": "$.info.version"
    },
    "autoupdate": {
        "note": "This package is installed via pip and will be updated automatically when the version changes"
    },
    "notes": [
        "This package requires Python 3.11 or higher to be installed.",
        "The package is installed via pip and managed by Python's package system.",
        "To update manually, run: python -m pip install --upgrade folder2md4llms",
        "Documentation: https://github.com/henriqueslab/folder2md4llms"
    ]
}