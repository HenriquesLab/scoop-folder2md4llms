name: Excavator

on:
  workflow_dispatch:
  schedule:
    # Run every 4 hours
    - cron: '0 */4 * * *'

jobs:
  excavator:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Scoop
      run: |
        echo "::group::Installing Scoop"
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
        Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression
        $env:PATH += ";$env:USERPROFILE\scoop\shims"
        echo "::endgroup::"
      shell: pwsh
    
    - name: Check for updates
      id: check_updates
      run: |
        echo "::group::Checking for updates"
        
        # Get current version from manifest
        $manifest = Get-Content "bucket/folder2md4llms.json" | ConvertFrom-Json
        $current_version = $manifest.version
        Write-Host "Current version: $current_version"
        
        # Get latest version from PyPI
        try {
            $response = Invoke-RestMethod -Uri "https://pypi.org/pypi/folder2md4llms/json"
            $latest_version = $response.info.version
            Write-Host "Latest version: $latest_version"
            
            # Compare versions
            if ($current_version -ne $latest_version) {
                Write-Host "🔄 Update available: $current_version -> $latest_version"
                echo "update_available=true" >> $env:GITHUB_OUTPUT
                echo "current_version=$current_version" >> $env:GITHUB_OUTPUT
                echo "latest_version=$latest_version" >> $env:GITHUB_OUTPUT
                
                # Get release information
                $description = $response.info.summary
                $homepage = $response.info.project_urls.Homepage
                $requires_python = $response.info.requires_python
                
                echo "description=$description" >> $env:GITHUB_OUTPUT
                echo "homepage=$homepage" >> $env:GITHUB_OUTPUT
                echo "requires_python=$requires_python" >> $env:GITHUB_OUTPUT
            } else {
                Write-Host "✅ Already up to date"
                echo "update_available=false" >> $env:GITHUB_OUTPUT
            }
        } catch {
            Write-Host "❌ Failed to check for updates: $($_.Exception.Message)"
            echo "update_available=false" >> $env:GITHUB_OUTPUT
        }
        
        echo "::endgroup::"
      shell: pwsh
    
    - name: Update manifest
      if: steps.check_updates.outputs.update_available == 'true'
      run: |
        echo "::group::Updating manifest"
        
        $latest_version = "${{ steps.check_updates.outputs.latest_version }}"
        Write-Host "Updating to version: $latest_version"
        
        # Read current manifest
        $manifest = Get-Content "bucket/folder2md4llms.json" | ConvertFrom-Json
        
        # Update version
        $manifest.version = $latest_version
        
        # Update description if available
        if ("${{ steps.check_updates.outputs.description }}" -ne "") {
            $manifest.description = "${{ steps.check_updates.outputs.description }}"
        }
        
        # Update homepage if available
        if ("${{ steps.check_updates.outputs.homepage }}" -ne "") {
            $manifest.homepage = "${{ steps.check_updates.outputs.homepage }}"
        }
        
        # Write updated manifest
        $manifest | ConvertTo-Json -Depth 10 | Set-Content "bucket/folder2md4llms.json"
        
        Write-Host "✅ Manifest updated successfully"
        echo "::endgroup::"
      shell: pwsh
    
    - name: Test updated manifest
      if: steps.check_updates.outputs.update_available == 'true'
      run: |
        echo "::group::Testing updated manifest"
        
        # Add scoop to path
        $env:PATH += ";$env:USERPROFILE\scoop\shims"
        
        # Validate JSON
        Write-Host "Validating updated manifest..."
        $manifest = Get-Content "bucket/folder2md4llms.json" | ConvertFrom-Json
        Write-Host "✅ Manifest JSON is valid"
        
        # Test installation
        Write-Host "Testing installation of updated version..."
        scoop install ./bucket/folder2md4llms.json
        
        # Test basic functionality
        Write-Host "Testing basic functionality..."
        python -m folder2md4llms.cli --version
        
        # Test uninstallation
        Write-Host "Testing uninstallation..."
        scoop uninstall folder2md4llms
        
        Write-Host "✅ Updated manifest tested successfully"
        echo "::endgroup::"
      shell: pwsh
    
    - name: Create Pull Request
      if: steps.check_updates.outputs.update_available == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update folder2md4llms to v${{ steps.check_updates.outputs.latest_version }}"
        title: "Update folder2md4llms to v${{ steps.check_updates.outputs.latest_version }}"
        body: |
          ## 🔄 Automatic Update
          
          **Previous version:** ${{ steps.check_updates.outputs.current_version }}
          **New version:** ${{ steps.check_updates.outputs.latest_version }}
          
          ### Changes
          - Updated manifest version to ${{ steps.check_updates.outputs.latest_version }}
          - Verified installation and functionality
          - All tests passed successfully
          
          ### Verification
          - ✅ Manifest JSON validation passed
          - ✅ Installation test passed
          - ✅ Functionality test passed
          - ✅ Uninstallation test passed
          
          This PR was automatically created by the Excavator workflow.
          
          **PyPI Package:** https://pypi.org/project/folder2md4llms/${{ steps.check_updates.outputs.latest_version }}/
          
          ---
          *Generated by Excavator 🤖*
        branch: update-folder2md4llms-v${{ steps.check_updates.outputs.latest_version }}
        base: main
        labels: |
          auto-update
          excavator
        draft: false
    
    - name: Workflow Summary
      if: always()
      run: |
        echo "## Excavator Update Summary" >> $env:GITHUB_STEP_SUMMARY
        
        if ("${{ steps.check_updates.outputs.update_available }}" -eq "true") {
            echo "- 🔄 **Update Available**: ${{ steps.check_updates.outputs.current_version }} → ${{ steps.check_updates.outputs.latest_version }}" >> $env:GITHUB_STEP_SUMMARY
            echo "- ✅ Manifest updated successfully" >> $env:GITHUB_STEP_SUMMARY
            echo "- ✅ Updated manifest tested successfully" >> $env:GITHUB_STEP_SUMMARY
            echo "- ✅ Pull request created" >> $env:GITHUB_STEP_SUMMARY
        } else {
            echo "- ✅ **No updates available** - manifest is current" >> $env:GITHUB_STEP_SUMMARY
        }
        
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "### Automation Features" >> $env:GITHUB_STEP_SUMMARY
        echo "- 🤖 Runs every 4 hours automatically" >> $env:GITHUB_STEP_SUMMARY
        echo "- 🔍 Checks PyPI for latest version" >> $env:GITHUB_STEP_SUMMARY
        echo "- 📝 Updates manifest automatically" >> $env:GITHUB_STEP_SUMMARY
        echo "- 🧪 Tests updated manifest" >> $env:GITHUB_STEP_SUMMARY
        echo "- 🔄 Creates PR for review" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "**Next check:** $(Get-Date).AddHours(4).ToString('yyyy-MM-dd HH:mm UTC')" >> $env:GITHUB_STEP_SUMMARY
      shell: pwsh