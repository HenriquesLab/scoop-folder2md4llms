name: Test Scoop Installation

on:
  push:
    branches: [main]
    paths:
      - 'bucket/**'
      - '.github/workflows/test-installation.yml'
  pull_request:
    branches: [main]
    paths:
      - 'bucket/**'
      - '.github/workflows/test-installation.yml'
  schedule:
    - cron: '0 4 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-scoop-installation:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clean up any existing installations
      run: |
        echo "::group::Cleanup existing installations"
        try { scoop uninstall folder2md4llms-binary } catch { Write-Host "No existing installation found" }
        try { scoop bucket rm folder2md4llms } catch { Write-Host "Bucket not found" }
        echo "✅ Cleanup completed"
        echo "::endgroup::"
      shell: pwsh

    - name: Install Scoop
      run: |
        echo "::group::Installing Scoop"
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
        Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression
        $env:PATH += ";$env:USERPROFILE\scoop\shims"
        echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        scoop --version
        echo "✅ Scoop installation completed"
        echo "::endgroup::"
      shell: pwsh

    - name: Test local manifest installation
      run: |
        echo "::group::Testing local manifest installation"
        Write-Host "Installing folder2md4llms-binary from local manifest..."
        $manifestPath = Join-Path (Get-Location) "bucket\folder2md4llms-binary.json"
        scoop install $manifestPath
        Write-Host "✅ Local installation completed"
        echo "::endgroup::"
      shell: pwsh

    - name: Verify installation
      run: |
        echo "::group::Verifying installation"
        $env:PATH += ";$env:USERPROFILE\scoop\shims"
        
        $folder2mdCmd = "folder2md"
        $commandExists = Get-Command folder2md -ErrorAction SilentlyContinue
        if (-not $commandExists) {
          $directPath = "$env:USERPROFILE\scoop\shims\folder2md"
          if (Test-Path $directPath) {
            $folder2mdCmd = $directPath
          } else {
            $binaryPath = "$env:USERPROFILE\scoop\shims\folder2md-windows-x64.exe"
            if (Test-Path $binaryPath) {
              $folder2mdCmd = $binaryPath
            } else {
              throw "❌ folder2md command not found"
            }
          }
        }
        
        Write-Host "Found command: $folder2mdCmd"
        & $folder2mdCmd --version
        & $folder2mdCmd --help | Out-Null
        Write-Host "✅ Installation verification passed"
        echo "::endgroup::"
      shell: pwsh

    - name: Test basic functionality
      run: |
        echo "::group::Testing basic functionality"
        $folder2mdCmd = "folder2md"
        $commandExists = Get-Command folder2md -ErrorAction SilentlyContinue
        if (-not $commandExists) {
          $directPath = "$env:USERPROFILE\scoop\shims\folder2md"
          if (Test-Path $directPath) {
            $folder2mdCmd = $directPath
          } else {
            $binaryPath = "$env:USERPROFILE\scoop\shims\folder2md-windows-x64.exe"
            if (Test-Path $binaryPath) {
              $folder2mdCmd = $binaryPath
            }
          }
        }
        
        New-Item -ItemType Directory -Path "test_scoop" -Force
        Set-Location "test_scoop"
        Set-Content -Path "README.md" -Value "# Test Project"
        Set-Content -Path "main.py" -Value "print('Hello from Scoop test')"
        New-Item -ItemType Directory -Path "src" -Force
        Set-Content -Path "src/utils.py" -Value "def hello(): pass"
        
        & $folder2mdCmd . --output test_output.md
        
        if (-not (Test-Path "test_output.md")) {
          throw "❌ Output file not created"
        }
        
        $content = Get-Content "test_output.md" -Raw
        if ($content -notmatch "Test Project") {
          throw "❌ README content missing"
        }
        
        if ($content -notmatch "Hello from Scoop test") {
          throw "❌ Python content missing"
        }
        
        & $folder2mdCmd --init-ignore
        
        if (-not (Test-Path ".folder2md_ignore")) {
          throw "❌ Ignore file not created"
        }
        
        Write-Host "✅ Basic functionality test passed"
        echo "::endgroup::"
      shell: pwsh

    - name: Test cleanup
      run: |
        echo "::group::Testing uninstallation"
        Set-Location ..
        Remove-Item -Path "test_scoop" -Recurse -Force -ErrorAction SilentlyContinue
        scoop uninstall folder2md4llms-binary
        
        $commandExists = Get-Command folder2md -ErrorAction SilentlyContinue
        if ($commandExists) {
          throw "❌ Command still available after uninstall"
        }
        
        Write-Host "✅ Uninstallation test passed"
        echo "::endgroup::"
      shell: pwsh

    - name: Test summary
      if: always()
      run: |
        echo "::group::Test Summary"
        Write-Host "### Scoop Installation Test Summary for ${{ matrix.os }}"
        Write-Host "- ✅ Local manifest installation"
        Write-Host "- ✅ Binary installation verification"
        Write-Host "- ✅ Basic functionality test"
        Write-Host "- ✅ Clean uninstallation"
        Write-Host ""
        Write-Host "All Scoop installation tests passed successfully!"
        echo "::endgroup::"
      shell: pwsh